% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_repository_cas_local_gc.R
\name{tar_repository_cas_local_gc}
\alias{tar_repository_cas_local_gc}
\title{Local CAS garbage collection}
\usage{
tar_repository_cas_local_gc(
  path = file.path(targets::tar_config_get("store"), "cas"),
  store = targets::tar_config_get("store")
)
}
\arguments{
\item{path}{Character string, file path to the CAS repository
where all the data object files will be stored.}

\item{store}{Character of length 1, path to the
\code{targets} data store. Defaults to \code{tar_config_get("store")},
which in turn defaults to \verb{_targets/}.
When you set this argument, the value of \code{tar_config_get("store")}
is temporarily changed for the current function call.
See \code{\link[=tar_config_get]{tar_config_get()}} and \code{\link[=tar_config_set]{tar_config_set()}} for details
about how to set the data store path persistently
for a project.}
}
\value{
\code{NULL} (invisibly). Called for its side effects.
Removes files from the CAS repository at \code{path}.
}
\description{
Garbage collection for a local content-addressable
storage system.
}
\details{
Deletes all the files in the local CAS which are not in
\code{tar_meta(targets_only = TRUE)$data}, including all locally saved
historical data of the pipeline. This clears disk space, but
at the expense of removing historical data and data from
other colleagues who worked on the same project.
}
\section{Content-addressable storage}{

Without content-addressable storage (CAS),
the output data of a pipeline is organized based
on the names of the targets. For example,
if your pipeline has a target \code{x},
then by default \code{\link[=tar_make]{tar_make()}} will store the data in a file
at \verb{_targets/objects/x}.
Here, the storage location of \code{x} depends on its target name.

Content-addressable storage (CAS) is different:
output files are organized based on their contents, not target names.
In a CAS system, the name of each output object is its hash, and the
metadata in
\code{tar_meta(fields = any_of(c("name", "data")), targets_only = TRUE)}
maps target names to object names.

CAS is ideal for data versioning and collaboration
because it accrues an ever-growing collection of historical objects
that the metadata can reassign to different target names as needed.
For example, if your code and metadata (\verb{_targets/meta/meta})
are in the same version-controlled source code repository and you
revert to a previous commit, then you can revisit a historical
version of your pipeline with your targets still up to date.
And in collaborative settings, you can fork your colleague's
code and metadata and leverage their up-to-date targets.

The weakness of CAS is the heavy buildup of data objects over time.
Whereas non-CAS storage maintains only the current version of target
\code{x} at any given time, a CAS system maintains each version of \code{x}
in its own file. Over time, this adds up to a lot of data and
a lot of files. Most pipelines using CAS
should have a garbage collection system to remove objects no longer
needed. This could involve removing files with sufficiently old
access dates, or if historical versioning is not desired,
removing files no longer in \code{tar_meta()$data}.

See the \code{\link[=tar_repository_cas_local]{tar_repository_cas_local()}} function for an example
CAS system based on a local folder on disk.
It uses \code{\link[=tar_repository_cas_local_upload]{tar_repository_cas_local_upload()}},
\code{\link[=tar_repository_cas_local_download]{tar_repository_cas_local_download()}}, and
\code{\link[=tar_repository_cas_local_exists]{tar_repository_cas_local_exists()}} for the respective
\code{upload}, \code{download}, and \code{exists} methods.
See the "Repository functions" section for specific advice on how
to write your own methods.
}

\examples{
if (identical(Sys.getenv("TAR_EXAMPLES"), "true")) { # for CRAN
tar_dir({ # tar_dir() runs code from a temp dir for CRAN.
tar_script({
  tar_option_set(seed = NA, repository = tar_repository_cas_local())
  list(tar_target(x, sample.int(n = 9e9, size = 1)))
})
for (index in seq_len(3)) tar_make(reporter = "silent")
list.files("_targets/cas")
tar_repository_cas_local_gc()
list.files("_targets/cas")
tar_meta(names = any_of("x"), fields = any_of("data"))
})
}
}
\seealso{
Other content-addressable storage: 
\code{\link{tar_repository_cas}()},
\code{\link{tar_repository_cas_local}()}
}
\concept{content-addressable storage}
