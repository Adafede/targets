% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_renv.R
\name{tar_renv}
\alias{tar_renv}
\title{Set up package dependencies for compatibility with \code{renv}}
\usage{
tar_renv(
  packages = targets::tar_option_get("packages"),
  path = "_packages.R",
  ask = NULL
)
}
\arguments{
\item{packages}{Character vector of packages to load right before
the target builds. Use \code{tar_option_set()} to set packages
globally for all subsequent targets you define.}

\item{path}{Character of length 1, path to the script file to
populate with \code{library()} calls.}

\item{ask}{Logical, whether to ask before writing if \verb{_packages.R}
already exists. If \code{NULL}, defaults to \code{Sys.getenv("TAR_ASK")}.
(Set to \code{"true"} or \code{"false"} with \code{Sys.setenv()}).
If \code{ask} and the \code{TAR_ASK} environment variable are both
indeterminate, defaults to \code{interactive()}.}
}
\value{
Nothing, invisibly.
}
\description{
Write package dependencies to a script file
(by default, named \verb{_packages.R} in the root project directory).
Each package is written to a separate line
as a standard \code{\link[=library]{library()}} call (e.g. \code{library(package)}) so
\code{renv} can identify them automatically. This is only
necessary if the user invokes \code{\link[=tar_option_set]{tar_option_set()}} or \code{\link[=tar_target]{tar_target()}} to
declare packages rather than the usual \code{library()} or namespaced call
(i.e. \verb{package::function()}). See \code{Details} for more information.
}
\details{
This function gets called for its side-effect, which writes
package dependencies provided to the \code{packages} argument to
a script. If you do not explicitly set the \code{packages} argument,
\code{tar_renv()} will only detect the packages that
\code{tar_option_get("packages")} returns at that point in the code.
The generated file should \strong{not} be edited by hand and will be
overwritten each time \code{tar_renv()} runs non-interactively.

With the script written by \code{tar_renv()}, \code{renv} is able to crawl the
file to identify package dependencies (with \code{renv::dependencies()}).
Calling \code{renv::init()} after \code{tar_renv()} has ran will set up a
project-local \code{R} library. This allows your \code{targets} pipeline to have
its own self-contained \code{R} library separate from your standard \code{R}
library. See \url{https://rstudio.github.io/renv/index.html} for
more information.
}
\examples{
tar_dir({
  tar_option_set(packages = c("tibble", "qs"))
  tar_renv()
  readLines("_packages.R")
})
}
\seealso{
\url{https://rstudio.github.io/renv/articles/renv.html}
}
