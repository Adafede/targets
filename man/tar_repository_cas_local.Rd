% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_repository_cas_local.R
\name{tar_repository_cas_local}
\alias{tar_repository_cas_local}
\title{Local content-addressable storage (CAS) repository.}
\usage{
tar_repository_cas_local(path, consistent = FALSE)
}
\arguments{
\item{path}{Character string, file path to the CAS repository
where all the data object files will be stored.}

\item{consistent}{Logical. Set to \code{TRUE} if the storage platform is
strongly read-after-write consistent. Set to \code{FALSE} if the platform
is not necessarily strongly read-after-write consistent.

A data storage system is said to have strong read-after-write consistency
if a new object is fully available for reading as soon as the write
operation finishes. Many modern cloud services like Amazon S3 and
Google Cloud Storage have strong read-after-write consistency,
meaning that if you upload an object with a PUT request, then a
GET request immediately afterwards will retrieve the precise
version of the object you just uploaded.

Some storage systems do not have strong read-after-write consistency.
One example is network file systems (NFS). On a computing cluster,
if one node creates a file on an NFS, then there is a delay before
other nodes can access the new file. \code{targets} handles this situation
by waiting for the new file to appear with the correct hash
before attempting to use it in downstream computations.
\code{consistent = FALSE} imposes a waiting period in which \code{targets}
repeatedly calls the \code{exists} method until the file becomes available
(at time intervals configurable with \code{\link[=tar_resources_network]{tar_resources_network()}}).
These extra calls to \code{exists} may come with a
little extra latency / computational burden,
but on systems which are not strongly read-after-write consistent,
it is the only way \code{targets} can safely use the current results
for downstream computations.}
}
\value{
A character string from \code{\link[=tar_repository_cas]{tar_repository_cas()}} which may be
passed to the \code{repository} argument of \code{\link[=tar_target]{tar_target()}} or
\code{\link[=tar_option_set]{tar_option_set()}} to use a local CAS system.
}
\description{
Local content-addressable storage (CAS) repository.
}
\details{
Pass to the \code{repository} argument of \code{\link[=tar_target]{tar_target()}} or
\code{\link[=tar_option_set]{tar_option_set()}} to use a local CAS system.
}
\seealso{
Other storage: 
\code{\link{tar_format}()},
\code{\link{tar_load}()},
\code{\link{tar_load_everything}()},
\code{\link{tar_load_raw}()},
\code{\link{tar_objects}()},
\code{\link{tar_read}()},
\code{\link{tar_read_raw}()},
\code{\link{tar_repository_cas}()}
}
\concept{storage}
