% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_config_set.R
\name{tar_config_set}
\alias{tar_config_set}
\title{Write configuration settings to _targets.yaml.}
\usage{
tar_config_set(
  reporter_make = NULL,
  reporter_outdated = NULL,
  store = NULL,
  shortcut = NULL,
  script = NULL,
  workers = NULL,
  config = Sys.getenv("TAR_CONFIG", "_targets.yaml")
)
}
\arguments{
\item{reporter_make}{Character of length 1, \code{reporter} argument to
\code{\link[=tar_make]{tar_make()}} and related functions that run the pipeline.}

\item{reporter_outdated}{Character of length 1, \code{reporter} argument to
\code{\link[=tar_outdated]{tar_outdated()}} and related functions that do not run the pipeline.}

\item{store}{Character of length 1, path to the data store of the pipeline.
If \code{NULL}, the \code{store} setting is left unchanged in the
YAML configuration file (default: \verb{_targets.yaml}).
Usually, the data store lives at \verb{_targets}.
Set \code{store} to a custom directory
to specify a path other than \verb{_targets/}. The path need not exist
before the pipeline begins, and it need not end with "_targets",
but it must be writeable.
For optimal performance, choose a storage location
with fast read/write access.}

\item{shortcut}{logical of length 1, default \code{shortcut} argument
to \code{\link[=tar_make]{tar_make()}} and related functions.}

\item{script}{Character of length 1, path to the target script file
that defines the pipeline (\verb{_targets.R} by default).
This path should be either
an absolute path or a path relative to the project root where you will
call \code{\link[=tar_make]{tar_make()}} and other functions. When \code{\link[=tar_make]{tar_make()}} and friends
run the script from the current working directory.}

\item{workers}{Positive numeric of length 1, \code{workers} argument of
\code{\link[=tar_make_clustermq]{tar_make_clustermq()}} and related functions that run the pipeline
with parallel computing among targets.}

\item{config}{Character of length 1, file path of the YAML
configuration file with \code{targets} project settings.
The \code{config} argument specifies which YAML configuration
file that \code{tar_config_get()} reads from or \code{tar_config_set()}
writes to in a single function call.
It does not globally change which configuration file is used
in subsequent function calls. The default file path of the YAML
file is always \verb{_targets.yaml} unless you set another
default path using the \code{TAR_CONFIG} environment variable,
e.g. \verb{Sys.setenv(TAR_CONFIG = "custom.yaml)}.
But please keep in mind that unless you set
\code{TAR_CONFIG} permanently inside your \code{.Renviron} file, the
environment variable will reset when your R session restarts.
Please check \code{Sys.getenv("TAR_CONFIG")} to be sure.}
}
\value{
\code{NULL} (invisibly)
}
\description{
\code{tar_config_set()} writes special custom settings
to an optional project-level
YAML configuration file (default: \verb{_targets.yaml}).
Most of these settings are default arguments shared across
multiple functions called outside \verb{_targets.R}.
}
\details{
Each project can have an optional YAML configuration file
(default: \verb{_targets.yaml} at the project root)
with configuration settings specific to a given project.
Use \code{tar_config_set()} to write to the file
and \code{tar_config_get()} to retrieve the value of a setting.
The currently supported configuration settings are
documented as the arguments of \code{tar_config_set()}.
To reset options completely,
simply remove the YAML configuration file.
}
\section{TAR_CONFIG}{

The \code{TAR_CONFIG} environment variable controls the file path to the
optional YAML configuration file with project settings.
If you do not set \code{TAR_CONFIG}, the default YAML file path is
\verb{_targets.yaml}. The YAML file controls the default values of various
arguments to functions like \code{\link[=tar_make]{tar_make()}}. Settings include
the file path of the target script (default: \verb{_targets.R})
and the directory path of the data store (default: \verb{_targets/}).
To modify the or access
the configuration settings programmatically,
use recommended functions \code{\link[=tar_config_set]{tar_config_set()}} and \code{\link[=tar_config_get]{tar_config_get()}}.
These functions are preferred over modifying the YAML file by hand
because they have documentation and guardrails to ensure correctness.
}

\examples{
if (identical(Sys.getenv("TAR_EXAMPLES"), "true")) {
tar_dir({ # tar_dir() runs code from a temporary directory.
tar_script(list(tar_target(x, 1 + 1)))
tar_config_get("store") # NULL (data store defaults to "_targets/")
store_path <- tempfile()
tar_config_set(store = store_path)
tar_config_get("store") # Shows a temp file.
tar_make() # Writes to the custom data store identified in _targets.yaml.
tar_read(x) # tar_read() knows about _targets.yaml too.
file.exists("_targets") # FALSE
file.exists(store_path) # TRUE
})
}
}
\seealso{
Other configuration: 
\code{\link{tar_config_get}()},
\code{\link{tar_envvars}()},
\code{\link{tar_option_get}()},
\code{\link{tar_option_reset}()},
\code{\link{tar_option_set}()}
}
\concept{configuration}
