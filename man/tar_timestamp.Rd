% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_timestamp.R
\name{tar_timestamp}
\alias{tar_timestamp}
\title{Get the timestamp(s) of a target.}
\usage{
tar_timestamp(name = NULL, format = "\%a, \%d \%b \%Y \%H:\%M:\%S", tz = "UTC")
}
\arguments{
\item{name}{Symbol, name of the target. If \code{NULL} (default)
then \code{tar_timestamp()} will attempt to return the timestamp
of the target currently running. Must be called inside a target's
command or a supporting function in order to work.}

\item{format}{Character of length 1, POSIXct format string passed to
\code{strptime()} to parse the time stamp of a URL or AWS S3 bucket.
Currently to targets with AWS-backed storage
formats or \code{format = "url"}. The default works with AWS S3
buckets and \url{https://httpbin.org} but may not work for all URLs.
Outside \code{targets}, you can use the \code{curl} package or the \code{curl} utility
to get time stamps of URLs.}

\item{tz}{Character of length 1, time zone to interpret the
original time stamp.  The \code{tz} argument is passed to
\code{strptime()} to parse the time stamp of a URL or AWS S3 bucket.
The time stamp of the return value
is the time zone of the system, not the time zone
originally recorded in the time stamp.}
}
\value{
A vector of POSIXct objects at the current time zone of the system.
If the target does not exists,
the return value is a \code{POSIXct} time object at \verb{1970-01-01 UTC}.
If the target has a local storage
format, the return value is the maximum timestamp
over all the files. (Targets with \code{format = "file"}
may have multiple files.) For AWS-backed formats
such as \code{"aws_parquet"}, the time stamp is obtained
from the modification timestamp of the AWS S3 object header.
}
\description{
Get the time that a target's data was last modified.
If there are multiple artifacts, as with file or URL targets,
then multiple time stamps may be returned.
}
\details{
\code{tar_timestamp()} checks the actual data,
not the metadata, so the returned time stamps
are more up-to-date than the ones from \code{\link[=tar_meta]{tar_meta()}}.
}
\examples{
if (identical(Sys.getenv("TAR_LONG_EXAMPLES"), "true")) {
tar_dir({ # tar_dir() runs code from a temporary directory.
tar_script({
  list(tar_target(x, 1))
}, ask = FALSE)
tar_make()
# Get the timestamp.
tar_timestamp(x)
# We can use the timestamp to cancel the target
# if it already ran within the last hour.
# Be sure to set `cue = tar_cue(mode = "always")`
# if you want the target to always check the timestamp.
tar_script({
  list(
  tar_target(
    x,
    tar_cancel((Sys.time() - tar_timestamp()) < 3600),
    cue = tar_cue(mode = "always")
  )
)}, ask = FALSE)
tar_make()
})
}
}
\seealso{
Other utilities: 
\code{\link{tar_cancel}()},
\code{\link{tar_envir}()},
\code{\link{tar_group}()},
\code{\link{tar_name}()},
\code{\link{tar_path}()},
\code{\link{tar_seed}()}
}
\concept{utilities}
