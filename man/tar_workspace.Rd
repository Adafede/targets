% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_workspace.R
\name{tar_workspace}
\alias{tar_workspace}
\title{Load a saved workspace and seed for debugging.}
\usage{
tar_workspace(name, envir = parent.frame(), packages = TRUE)
}
\arguments{
\item{name}{Symbol, name of the target whose workspace to read.}

\item{envir}{Environment in which to put the objects.}

\item{packages}{Logical, whether to load the required packages
of the target. Uses \code{require()} with \code{lib.loc} equal to
the \code{library} setting of the target
(from \code{tar_target(library = "PATH_TO_LIB")} or
\code{tar_option_set(library = "PATH_TO_LIB")}).}
}
\value{
the function returns no value, but it does load
the target's required packages, as well as multiple objects
into the environment (\code{envir} argument) in order to replicate the
workspace where the error happened. These objects include
the global objects at the time \code{\link[=tar_make]{tar_make()}} was called, the
dependency targets, the random number generator seed
(assigned to \code{.targets$seed} and set with \code{set.seed()})
and the traceback of the error (assigned to \code{.targets$traceback}).
}
\description{
Load the packages, workspace, and random number generator seed
of an errored target attempted with \code{error = "save"}.
Remove workspace files with \code{\link[=tar_undebug]{tar_undebug()}} when you are done debugging.
}
\details{
If you set \code{error = "save"} in \code{\link[=tar_option_set]{tar_option_set()}}
or \code{\link[=tar_target]{tar_target()}}, then if that target throws an error
in \code{\link[=tar_make]{tar_make()}}, it will save its workspace to a compressed file
in \verb{_targets/workspaces/}. The workspace includes the
target's required packages, the
global objects at the time \code{\link[=tar_make]{tar_make()}} was called, the
dependency targets, the random number generator seed
(assigned to \code{.targets$seed} and set with \code{set.seed()})
and the traceback of the error (assigned to \code{.targets$traceback}).
\code{tar_workspace()} loads the packages, populates the environment
with the objects, and sets the seed to the seed of the target.
Workspace files can be large sometimes, so it is good practice to
remove them with \code{\link[=tar_undebug]{tar_undebug()}} when you are done debugging.

Although useful, this behavior does not perfectly replicate
what \code{\link[=tar_make]{tar_make()}} does to set up the runtime environment
for a target. \code{\link[=tar_make]{tar_make()}} creates a formal hierarchy of
environments that inherit from one another in order to
organize data and contain side effects.

In addition, sometimes, you may not be able to debug with
\code{error = "save"}. Workspace files are saved with \code{qs::qsave()},
so if one of your dependencies cannot be properly serialized this way
(e.g. Keras models you store with \code{format = "keras"})
then the workspace cannot be saved properly. If this happens to you,
either avoid non-exportable objects or use interactive debugging.
(See the \code{debug} argument of \code{\link[=tar_option_set]{tar_option_set()}}.)
}
\examples{
\dontrun{
tmp <- sample(1)
tar_script({
  tar_option_set(error = "save") # Required for saving workspaces.
  tar_pipeline(
    tar_target(x, "loaded"),
    tar_target(y, stop(x))
  )
})
try(tar_make())
exists("x") # Should be FALSE.
tail(.Random.seed)
tar_workspace(y)
exists("x") # Should be TRUE.
print(x) # "loaded"
tail(.Random.seed) # Should be different.
tail(.targets$traceback, 1)
}
}
