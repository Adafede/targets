% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_envvars.R
\name{tar_envvars}
\alias{tar_envvars}
\title{Show environment variables to customize \code{targets}}
\usage{
tar_envvars(unset = "")
}
\arguments{
\item{unset}{Character of length 1, value to return
for any environment variable that is not set.}
}
\value{
A data frame with one row per environment variable
and columns with the name and current value of each.
An unset environment variable will have a value of \code{""}
by default. (Customize with the \code{unset} argument).
}
\description{
You can customize the behavior of \code{targets}
with special environment variables. The sections in this help file
describe each environment variable, and the \code{tar_envvars()} function
lists their current values.
}
\details{
If you modify environment variables, please set them
in project-level \code{.Renviron} file. That way, the same values
are shared among the main session and
the external \code{callr} processes of \code{\link[=tar_make]{tar_make()}} etc.
Modify the project-level \code{.Renviron} file with
\code{usethis::edit_r_environ(scope = "project")}. Restart
your R session after you are done editing.
}
\section{TAR_ASK}{

The \code{TAR_ASK} environment variable accepts values \code{"true"} and \code{"false"}.
If \code{TAR_ASK} is not set, or if it is set to \code{"true"},
then \code{targets} asks permission in a menu
before overwriting certain files, such as \verb{_targets.R} in \code{\link[=tar_script]{tar_script()}}.
If \code{TAR_ASK} is \code{"false"}, then \code{targets} overwrites the old files
with the new ones without asking. Once you are comfortable with
\code{\link[=tar_script]{tar_script()}}, \code{\link[=tar_github_actions]{tar_github_actions()}}, and similar functions,
you can safely set \code{TAR_ASK} to \code{"false"} in either a project-level
or user-level \code{.Renviron} file.
}

\section{TAR_STORE}{

\code{TAR_STORE} controls the location of the local data store of your
pipeline. If you do not set \code{TAR_STORE}, then the data store lives
in a special \verb{_targets/} folder at the project root.
(The project root is the value of \code{getwd()} when you run the pipeline
with \code{\link[=tar_make]{tar_make()}} or similar.) If you set \code{TAR_STORE} to a directory path,
then the pipeline writes its files to the path you specify
instead of the default \verb{_targets/} folder. If you set \code{TAR_STORE}
to a relative path, the path must be relative to the project root.
\code{TAR_STORE} applies to metadata and ordinary storage formats such as
\code{"rds"}, but not to external storage formats
such as \code{"file"} or \code{"aws_parquet"}.

Do not set \code{TAR_STORE} unless your use case absolutely requires it
and you fully understand the consequences.
There are two significant risks:
\enumerate{
\item Some functions like \code{\link[=tar_read]{tar_read()}} run in your local R session,
while others like \code{\link[=tar_make]{tar_make()}} run in a fresh new external
\code{callr} R process in order to ensure reproducibility.
The value of \code{Sys.getenv("TAR_STORE")} must agree
between these two R sessions. Otherwise, you risk
reading from or writing to the incorrect location.
For best results, set the value of \code{TAR_STORE} in
a project-level \verb{.Renviron file} (e.g. with
\code{usethis::edit_r_environ(scope = "project")})
and restart your main R session.
\item Alternative data store locations generally undermine
reproducibility. With a non-standard storage location,
your project becomes harder for others to read and understand,
and you will have more trouble refreshing your memory
if you have to put it aside for several months and then
return to it cold.
}

The path at \code{TAR_STORE} need not exist in advance,
and it does not need to end with \code{"_targets"}.
However, it must be locally accessible, and it must be writeable.
For performance, it should live in a physical storage
volume with fast read/write access. (Remote network drives on Windows
will cause intractable lag.) RStudio Connect users can set \code{TAR_STORE}
to a subdirectory of \verb{/mnt/shared-data/} so the data store persists
across multiple deployments of the same application.
}

\section{TAR_WARN}{

The \code{TAR_WARN} environment variable accepts values \code{"true"} and \code{"false"}.
If \code{TAR_WARN} is not set, or if it is set to \code{"true"},
then \code{targets} throws warnings in certain edge cases,
such as target/global name conflicts and dangerous use of
\code{devtools::load_all()}. If \code{TAR_WARN} is \code{"false"}, then \code{targets}
does not throw warnings in these cases.
These warnings are harmless, and they can detect potentially serious
issues with your pipeline, so please do not set \code{TAR_WARN}
unless your use case absolutely requires it.
}

\examples{
tar_envvars()
}
